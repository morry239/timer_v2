const fields = ["id", "firstname", "lastname", "email", "age"];

async function getData() {
  const res = await fetch("https://randomuser.me/api/?results=15");
  const userData = await res.json();
  console.log(userData.results);
  return userData.results;
}

function changeBackground(){
  $('th:nth-child(1)').css('background-color', 'rgb(125, 122, 122)');
  $('th:nth-child(1)').css('color', '#fff');
  $('td:nth-child(1)').css('background-color', 'rgb(125, 122, 122)');
  $('td:nth-child(1)').css('color', '#fff');
}

function createTableRows(personArray) {
  const table = document.getElementById("tableContent");
  table.innerHTML = "";
  
  for(let i = 0; i<personArray.length; i++){
      const row = table.insertRow(-1);
      fields.forEach((field) => {
        const cell = row.insertCell(-1);
        cell.innerHTML = personArray[i][field];

      });
  }
  changeBackground();
}

async function loadTableData() {
  const data = await getData();
  const persons = data.map((personJson, i) => ({
    // TODO: insert customId like "sip#1".
    id: "sip#" + (i+1),
    firstname: personJson.name.first,
    lastname: personJson.name.last,
    email: personJson.email,
    age: personJson.dob.age
  }));
  return persons;
}

let asc = true;
let sortBy = "id";
function setSortHandler(persons) {
  const headers = document.querySelectorAll("#personTable th");
  headers.forEach((th, fieldIndex) => {
    // clone th to remove old event listeners.
    const thClone = th.cloneNode(true);
    th.replaceWith(thClone);
    thClone.addEventListener("click", () => {
      if (sortBy == fields[fieldIndex]) {
        asc = !asc;
      } else {
        asc = true;
      }
      sortData(persons, fields[fieldIndex], asc);
    });
  });
}


function sortData(personArray, property, asc = true) {
  // TODO: Sort the PersonArray by the given property(eg. name, age, ...).
  var tbody = document.getElementById(personArray).getElementsByTagName(
  "tbody")[0];
  debugger;

  var rows = tbody.getElementsByTagName("tr");
  debugger;
  var unsorted = true;
  debugger;

  while(unsorted){
    debugger;
    unsorted = false
    debugger;
    for(var i = 0; i < rows.length - 1; r++){
      debugger;
      var row = rows[i];
      debugger;
      var nextRow = rows[i + 1];
      debugger;

      var value = row.getElementsByClassName(property)[0].innerHTML;
      debugger;
      var nextValue = nextRow.getElementsByClassName(columnClassName)[0].innerHTML;
      debugger;

      value = value.replace(',', '.');
      debugger;
      nextValue = nextValue.replace(',','.');
      debugger;

      if(!isNaN(value)){
        debugger;
        value = parseFloat(value);
        debugger;
        nextValue = parseFloat(nextValue);
        debugger;
      }

      if(asc ? value > nextValue : value < nextValue){
        debugger;
        tbody.insertBefore(nextRow, row);
        debugger;
        unsorted = true;
        debugger;
      }
    }
  }
  
  createTableRows(personArray);
  debugger;
}


function calculateAverageAge(personArray) {
  // TODO: calcualte average age of all persons displayed in the table.
  let avg = 0;
  for(let i = 0; i < personArray.length; i++){
    let currentNr = personArray[i]["age"];
    avg += currentNr;
  }
  avg = avg / personArray.length;
  document.getElementById("result").innerHTML = parseInt(avg);
}
calculateAverageAge(fields);


function filterPersons(personArray, searchInput) {
  // TODO: Add a filter function to search a persons properties for the given input String. 
}

(async () => {
  const persons = await loadTableData();
  createTableRows(persons);
  setSortHandler(persons);
  calculateAverageAge(persons);
  document
    .querySelector("#searchInput")
    .addEventListener("input", ({ target: { value } }) => {
      const newPersons = filterPersons(persons, value);
      // retain sort direction after filtering
      sortData(newPersons, sortBy, asc);
      setSortHandler(newPersons);
      calculateAverageAge(newPersons);
    });
})();
